name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v0.1.1)'
        required: false
        default: ''

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "version=v$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 检查tag是否已存在
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping tag creation"
          else
            git tag -a "v$VERSION" -m "Release v$VERSION"
            git push origin "v$VERSION"
            echo "Created and pushed tag v$VERSION"
          fi

      - name: Create Draft GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: AI Gist ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          generate_release_notes: true

  build-mac:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: npm install -g typescript

      - name: Build and Publish (macOS)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: |
          node scripts/build.js
          yarn electron-builder --mac --${{ matrix.arch }} --publish always

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: npm install -g typescript

      - name: Build and Publish (Windows)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          node scripts/build.js
          yarn electron-builder --win --publish always

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: npm install -g typescript

      - name: Build and Publish (Linux)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          node scripts/build.js
          yarn electron-builder --linux --publish always

